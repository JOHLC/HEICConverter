name: Build and Validate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ImageMagick
      run: |
        # Try to install ImageMagick, but don't fail if it's already installed or no upgrade is available
        $result = winget install -e --id ImageMagick.ImageMagick --accept-source-agreements --accept-package-agreements
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ ImageMagick installed successfully"
        } elseif ($LASTEXITCODE -eq 1) {
          Write-Host "ℹ️  ImageMagick already installed or no upgrade available"
          # Verify it's actually installed and accessible
          try {
            $version = magick -version 2>$null
            if ($version) {
              Write-Host "✅ ImageMagick is accessible: $($version.Split("`n")[0])"
            } else {
              Write-Error "❌ ImageMagick installation verification failed"
              exit 1
            }
          } catch {
            Write-Error "❌ ImageMagick installation verification failed: $($_.Exception.Message)"
            exit 1
          }
        } else {
          Write-Error "❌ ImageMagick installation failed with exit code $LASTEXITCODE"
          exit 1
        }
    
    - name: Verify ImageMagick Installation
      run: |
        magick -version
    
    - name: Install PS2EXE Module
      run: |
        try {
          Install-Module -Name PS2EXE -Force -AllowClobber -Scope CurrentUser
          Write-Host "✅ PS2EXE module installed successfully"
        } catch {
          Write-Error "❌ Failed to install PS2EXE module: $($_.Exception.Message)"
          exit 1
        }
    
    - name: Validate PowerShell Script Syntax
      run: |
        $scriptPath = "build/PS2EXE/HEICConverter.ps1"
        $errors = $null
        $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $scriptPath -Raw), [ref]$errors)
        if ($errors) {
          Write-Error "PowerShell syntax errors found:"
          $errors | ForEach-Object { Write-Error $_ }
          exit 1
        } else {
          Write-Host "✅ PowerShell script syntax is valid"
        }
    
    - name: Build Executable
      run: |
        cd build/PS2EXE
        .\PS2EXE.ps1
        if (-not (Test-Path "HEICConverter.exe")) {
          Write-Error "❌ Failed to build executable"
          exit 1
        } else {
          Write-Host "✅ Executable built successfully"
          Get-Item "HEICConverter.exe" | Select-Object Name, Length, LastWriteTime
        }
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: HEICConverter-exe
        path: build/PS2EXE/HEICConverter.exe
        retention-days: 30